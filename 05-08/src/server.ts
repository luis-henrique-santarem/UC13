import express, { Application, NextFunction, Request, Response } from 'express';

const app: Application = express();  // Tipando 'app' como 'Application'

// Define a porta 300 para o servidor escutar
const PORT: number = 3000;  // Tipagem da porta como nÃºmero

// Middleware para permitir que o Express interprete JSON
app.use(express.json());

// Define um middleware chamado "porteiroMiddleware"
// Middleware Ã© uma funÃ§Ã£o que intercepta a requisiÃ§Ã£o antes de ela chegar Ã  rota final
// NextFunction Ã© o tipo da funÃ§Ã£o next(). Se vocÃª nÃ£o chamar next(), a requisiÃ§Ã£o fica presa no middleware e nÃ£o chega na rota final
const porteiroMiddleware = (req: Request, res: Response, next: NextFunction) => {
  
  // Exibe no console o caminho da URL acessada na requisiÃ§Ã£o
  console.log(`ðŸ“¢ RequisiÃ§Ã£o recebida em: ${req.url}`);

  // Chama a funÃ§Ã£o "next" para permitir que a requisiÃ§Ã£o continue para o prÃ³ximo middleware ou rota
  next();
};

// Aplica o middleware "porteiroMiddleware" de forma global
// Isso significa que ele serÃ¡ executado em **todas as requisiÃ§Ãµes**, independentemente da rota
app.use(porteiroMiddleware);

// Rota simples
app.get('/saudacao', (req: Request, res: Response):Response => {
    return res.send('OlÃ¡, jovem programador');
})

app.use((req: Request, res: Response): Response => {
  
    // Retorna uma resposta com status HTTP 404 (NÃ£o Encontrado)
    // E envia um JSON com a mensagem personalizada
    return res.status(404).json({ mensagem: 'Rota nÃ£o encontrada!' });
  });
  

// Iniciando o servidor
app.listen(PORT, (): void => {
  console.log(`ðŸ”¥ Servidor rodando em http://localhost:${PORT}`);
});


